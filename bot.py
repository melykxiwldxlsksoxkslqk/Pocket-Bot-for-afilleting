import asyncio
import logging
import os
import sys
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramForbiddenError
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', stream=sys.stdout)
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
from app.core.dispatcher import dp, bot, admin_panel, trading_api, telethon_client
from app.services.background import periodic_auth_check
from app.core.middleware import MaintenanceMiddleware, AdminCheckMiddleware
from app.handlers import user_handlers
from app.handlers import admin_panel_handlers
from app.handlers import auth_handlers

async def _ensure_telethon_authorized() -> bool:
	"""–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é Telethon –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω."""
	await telethon_client.initialize()
	if getattr(telethon_client, 'is_connected', False):
		return True
	logger.warning("Telethon –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–∏–Ω (telethon_login.py)...")
	base_dir = os.path.dirname(__file__)
	script_path = os.path.join(base_dir, 'app', 'services', 'telethon_login.py')
	if not os.path.exists(script_path):
		script_path = os.path.join(base_dir, 'telethon_login.py')
	if not os.path.exists(script_path):
		logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω telethon_login.py. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
		return False
	# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤ —Ç–æ–º –∂–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –∏ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏{20E763FD-DA44-4FE9-A10B-E2396B0DA7ED}.png
	base_dir = os.path.dirname(__file__)
	script_path = os.path.join(base_dir, 'app', 'services', 'telethon_login.py')
	if not os.path.exists(script_path):
		script_path = os.path.join(base_dir, 'telethon_login.py')
	proc = await asyncio.create_subprocess_exec(sys.executable, script_path)
	ret = await proc.wait()
	if ret != 0:
		logger.error(f"telethon_login.py –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {ret}")
		return False
	await telethon_client.initialize()
	return getattr(telethon_client, 'is_connected', False)

async def main():
	"""–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
	# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞ (–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
	auth_ok = await _ensure_telethon_authorized()
	if not auth_ok:
		logger.error("Telethon –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.")
		return

	# 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ TradingAPI (Telethon client —É–∂–µ –≤–Ω–µ–¥—Ä–µ–Ω —á–µ—Ä–µ–∑ dispatcher)
	is_session_valid = await trading_api.initialize_session()
	if not is_session_valid:
		admin_id = admin_panel.get_admin_id()
		if admin_id:
			try:
				auth_keyboard = InlineKeyboardMarkup(inline_keyboard=[
					[InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", callback_data="start_manual_auth")]
				])
				await bot.send_message(
					admin_id,
					"üî¥ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!</b>\n\n–°–µ—Å—Å–∏—è API –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
					parse_mode="HTML",
					reply_markup=auth_keyboard
				)
				trading_api.critical_notification_sent = True
				logger.warning("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
			except TelegramForbiddenError:
				logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
			except Exception as e:
				logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

	# 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
	dp.update.middleware(MaintenanceMiddleware())
	admin_panel_handlers.router.message.middleware(AdminCheckMiddleware())
	admin_panel_handlers.router.callback_query.middleware(AdminCheckMiddleware())
	
	# 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
	auth_task = asyncio.create_task(periodic_auth_check(bot, trading_api, admin_panel))
	
	# 5. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
	logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤...")
	dp.include_router(user_handlers.router)
	dp.include_router(admin_panel_handlers.router)
	dp.include_router(auth_handlers.router)
	logger.info("–†–æ—É—Ç–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

	# 6. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
	await bot.delete_webhook(drop_pending_updates=True)
	logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
	try:
		await dp.start_polling(bot, skip_updates=True)
	finally:
		# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
		logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
		
		# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
		auth_task.cancel()

		# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Telethon –∫–ª–∏–µ–Ω—Ç–∞
		await telethon_client.disconnect()
		
		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
		logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
		admin_panel._save_data()
		
		# –ó–∞–∫—Ä—ã—Ç–∏–µ Selenium WebDriver
		if trading_api and trading_api.auth and trading_api.auth.driver:
			logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ Selenium WebDriver...")
			trading_api.auth.close()
		
		# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
		await bot.session.close()
		logger.info("–ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
	try:
		asyncio.run(main()) 
	except (KeyboardInterrupt, SystemExit):
		logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")