"""
admin_panel_handlers.py
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª–∏ Telegram‚Äë–±–æ—Ç–∞.
"""

import logging
import json
import os
from datetime import datetime, timedelta, timezone
import asyncio
from aiogram import F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

logger = logging.getLogger(__name__)

from app.core.dispatcher import dp, bot, admin_panel, trading_api
from app.core.keyboards import (
    get_referral_settings_keyboard, 
    get_cancel_keyboard,
    get_back_to_panel_keyboard, 
)
from app.core.fsm import Admin, AuthStates
import app.core.database as db
from app.handlers.user_handlers import show_signal_menu
from app.services.telethon_code import telethon_client
from app.core.i18n import t


router = Router()

@router.callback_query(F.data == "admin_show_signals")
async def admin_show_signals_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –º–µ–Ω—é —Å–∏–≥–Ω–∞–ª–æ–≤, –∫–∞–∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    await show_signal_menu(callback.message, edit=True)
    await callback.answer()

@router.callback_query(F.data == "none")
async def handle_none_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–ª—è–µ—Ç –∫–æ–ª–±–µ–∫–∏ –æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –Ω–∏—Ö."""
    await callback.answer()

# region Service Functions
async def show_admin_panel(message: Message | CallbackQuery, state: FSMContext):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î –≥–æ–ª–æ–≤–Ω—É –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    await state.set_state(Admin.admin_menu)
    text = "üë®‚Äçüíº <b>–ê–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º:"
    markup = admin_panel.get_admin_keyboard()
    
    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ callback‚Äë–∑–∞–ø—Ä–æ—Å—ã
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        finally:
            try:
                await message.answer()
            except TelegramBadRequest:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ callback‚Äë–∑–∞–ø—Ä–æ—Å—ã
                pass
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

async def _show_settings_panel(message: Message | CallbackQuery, state: FSMContext):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    await state.set_state(Admin.settings)
    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    markup = admin_panel.get_settings_keyboard()
    
    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        finally:
            try:
                await message.answer()
            except TelegramBadRequest:
                pass
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

async def _show_referral_panel(message: Message | CallbackQuery, state: FSMContext):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    await state.set_state(Admin.referral_settings)
    settings = admin_panel.get_referral_settings()
    text = "üîó <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É."
    markup = get_referral_settings_keyboard(settings)

    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        finally:
            try:
                await message.answer()
            except TelegramBadRequest:
                pass
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

# endregion

# region Main Admin Commands
@router.message(Command("admin"))
async def cmd_admin(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /admin."""
    if admin_panel.is_admin(message.from_user.id):
        await show_admin_panel(message, state)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

@router.callback_query(F.data == "admin_panel")
async def cq_show_admin_panel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–ª–±–µ–∫ 'admin_panel' –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
    await show_admin_panel(callback, state)

@router.callback_query(F.data == "admin_settings")
async def handle_show_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Ö–æ–¥—É –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    await _show_settings_panel(callback, state)

@router.message(Command("stats"))
async def show_stats_command(message: Message):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞. –¢—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤."""
    if not admin_panel.is_admin(message.from_user.id):
        await message.reply("–¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.")
        return

    stats = admin_panel.get_statistics()
    
    stats_message = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ (–≤ –±–∞–∑—ñ): {stats['total_users']}\n"
        f"üöÄ –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è /start: {stats['total_starts']}\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {stats['verified_users']}\n"
        f"‚è≥ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {stats['in_verification_users']}\n"
        f"üìà –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ (—Å—å–æ–≥–æ–¥–Ω—ñ): {stats['signals_generated_today']}\n"
        f"üìà –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª—ñ–≤ (–≤—Å—å–æ–≥–æ): {stats['signals_generated_total']}"
    )
    
    await message.answer(stats_message, parse_mode="HTML")

# endregion

# region Maintenance
async def _show_maintenance_panel(message: Message | CallbackQuery, state: FSMContext):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
    await state.set_state(Admin.maintenance)
    text = "üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è</b>"
    markup = admin_panel.get_maintenance_keyboard()
    
    if isinstance(message, CallbackQuery):
        try:
            await message.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        except TelegramBadRequest:
            try:
                await message.message.delete()
            except TelegramBadRequest:
                pass
            await message.message.answer(text, reply_markup=markup, parse_mode="HTML")
        finally:
            try:
                await message.answer()
            except TelegramBadRequest:
                pass
    else:
        await message.answer(text, reply_markup=markup, parse_mode="HTML")

@router.callback_query(F.data == "admin_maintenance")
async def handle_show_maintenance_panel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Ö–æ–¥—É –≤ –º–µ–Ω—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
    await _show_maintenance_panel(callback, state)

@router.callback_query(F.data == "admin_maintenance_toggle")
async def toggle_maintenance_mode(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–º–∏–∫–∞—î —Ä–µ–∂–∏–º –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
    new_mode = not admin_panel.get_maintenance_mode()
    admin_panel.set_maintenance_mode(new_mode)
    status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_mode else "–≤–∏–º–∫–Ω–µ–Ω–æ"
    
    try:
        await callback.answer(f"–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è {status}.", show_alert=True)
    except TelegramBadRequest:
        pass
    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞–Ω–µ–ª—å –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å
    await _show_maintenance_panel(callback, state)

@router.callback_query(F.data == "admin_set_maintenance_msg")
async def set_maintenance_msg(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Ç—É—î –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ö. —Ä–æ–±–æ—Ç–∏."""
    await state.set_state(Admin.change_maintenance_message)
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<i>{admin_panel.get_maintenance_message()}</i>\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ:",
        reply_markup=get_cancel_keyboard("admin_maintenance"), # –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è
        parse_mode="HTML"
    )

@router.message(StateFilter(Admin.change_maintenance_message), F.text)
async def process_new_maintenance_message(message: Message, state: FSMContext):
    """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ—Ö. —Ä–æ–±–æ—Ç–∏."""
    admin_panel.set_maintenance_message(message.text.strip())
    await message.answer("‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.</b>", parse_mode="HTML")
    await _show_maintenance_panel(message, state)

# endregion

# region Statistics
@router.callback_query(F.data == "admin_stats")
async def show_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    stats = admin_panel.get_statistics()
    
    stats_text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë§ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤ –±–∞–∑–µ): {stats['total_users']}\n"
        f"üöÄ –ù–∞–∂–∞—Ç–∏–π /start: {stats['total_starts']}\n"
        f"‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['verified_users']}\n"
        f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {stats['in_verification_users']}\n"
        f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–µ–≥–æ–¥–Ω—è): {stats['signals_generated_today']}\n"
        f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ (–≤—Å–µ–≥–æ): {stats['signals_generated_total']}"
    )
    
    try:
        await callback.message.edit_text(
            stats_text,
            reply_markup=admin_panel.get_admin_keyboard(),
            parse_mode="HTML",
        )
    except TelegramBadRequest:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∫–æ–ª–±–µ–∫
        await callback.answer("–î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.")
    else:
        await callback.answer()
# endregion

# region Broadcast
@router.callback_query(F.data == 'admin_broadcast_menu')
async def broadcast_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ç–∏–ø—É —Ä–æ–∑—Å–∏–ª–∫–∏."""
    await callback.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=admin_panel.get_broadcast_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == 'admin_broadcast_all')
async def start_broadcast_all(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –≤—Å—ñ—Ö."""
    await state.set_state(Admin.send_broadcast)
    await callback.message.edit_text(
        "üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>–≤—Å–µ–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞.",
        reply_markup=get_cancel_keyboard("admin_broadcast_menu"),
        parse_mode="HTML"
    )

@router.callback_query(F.data == 'admin_broadcast_verified')
async def start_broadcast_verified(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö."""
    await state.set_state(Admin.send_verified_broadcast)
    await callback.message.edit_text(
        "üì® –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ <b>–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
        reply_markup=get_cancel_keyboard("admin_broadcast_menu"),
        parse_mode="HTML"
    )

@router.message(StateFilter(Admin.send_broadcast), F.text)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–ù–∞–¥—Å–∏–ª–∞—î —Ä–æ–∑—Å–∏–ª–∫—É –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º."""
    users = db.get_all_users()
    await send_messages_to_users(message, state, list(users.keys()))

@router.message(StateFilter(Admin.send_verified_broadcast), F.text)
async def process_verified_broadcast_message(message: Message, state: FSMContext):
    """–ù–∞–¥—Å–∏–ª–∞—î —Ä–æ–∑—Å–∏–ª–∫—É –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º."""
    all_users = db.get_all_users()
    verified_user_ids = [uid for uid, udata in all_users.items() if db.is_fully_verified(int(uid))]
    await send_messages_to_users(message, state, verified_user_ids)

async def send_messages_to_users(message: Message, state: FSMContext, user_ids: list):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–¥–∞–Ω–æ–º—É —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
    total_users = len(user_ids)
    count = 0
    errors = 0
    
    await message.answer(f"‚è≥ –ü–æ—á–∏–Ω–∞—é —Ä–æ–∑—Å–∏–ª–∫—É –¥–ª—è <b>{total_users}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...", parse_mode="HTML")
    
    for user_id in user_ids:
        try:
            await bot.send_message(user_id, message.text, parse_mode="HTML")
            count += 1
            await asyncio.sleep(0.1)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
        except Exception as e:
            errors += 1
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
    await message.answer(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n\n"
        f"üì• –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{count}</b> –∏–∑ {total_users}\n"
        f"‚ùå –û—à–∏–±–æ–∫: <b>{errors}</b>",
        reply_markup=admin_panel.get_admin_keyboard(),
        parse_mode="HTML"
    )
    await state.clear()

# endregion

# region Settings

# Welcome Message
@router.callback_query(F.data == "admin_set_welcome")
async def set_welcome_msg(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (RU/EN)."""
    await state.set_state(Admin.change_welcome_message)
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="RU", callback_data="admin_set_welcome_ru"),
        InlineKeyboardButton(text="EN", callback_data="admin_set_welcome_en"),
    )
    kb.row(InlineKeyboardButton(text=t("admin.settings.back", "ru"), callback_data="admin_settings"))
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ RU:\n<i>{admin_panel.get_welcome_message()}</i>\n\n"
        f"Current EN:\n<i>{admin_panel.get_welcome_message_en()}</i>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass

@router.callback_query(F.data == "admin_set_welcome_ru")
async def ask_welcome_ru(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.change_welcome_message)
    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–µ–µ RU —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n<i>{admin_panel.get_welcome_message()}</i>\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ RU‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=get_cancel_keyboard("admin_settings"),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_set_welcome_en")
async def ask_welcome_en(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.waiting_for_text_to_edit)
    await callback.message.edit_text(
        f"<b>Current EN message:</b>\n\n<i>{admin_panel.get_welcome_message_en()}</i>\n\n‚úçÔ∏è Enter new EN message:",
        reply_markup=get_cancel_keyboard("admin_settings"),
        parse_mode="HTML"
    )

@router.message(Admin.change_welcome_message, F.text)
async def process_new_welcome_message(message: Message, state: FSMContext):
    admin_panel.set_welcome_message(message.text.strip())
    await message.answer("‚úÖ <b>RU –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>", parse_mode="HTML")
    await _show_settings_panel(message, state)

@router.message(Admin.waiting_for_text_to_edit, F.text)
async def process_new_welcome_message_en(message: Message, state: FSMContext):
    admin_panel.set_welcome_message_en(message.text.strip())
    await message.answer("‚úÖ <b>EN welcome updated!</b>", parse_mode="HTML")
    await _show_settings_panel(message, state)

# Finish Message
@router.callback_query(F.data == "admin_set_finish_msg")
async def set_finish_msg(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (RU/EN)."""
    kb = InlineKeyboardBuilder()
    kb.row(
        InlineKeyboardButton(text="RU", callback_data="admin_set_finish_ru"),
        InlineKeyboardButton(text="EN", callback_data="admin_set_finish_en"),
    )
    kb.row(InlineKeyboardButton(text=t("admin.settings.back", "ru"), callback_data="admin_settings"))
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ RU:\n<i>{admin_panel.get_finish_message()}</i>\n\n"
        f"Current EN:\n<i>{admin_panel.get_finish_message_en()}</i>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_set_finish_ru")
async def ask_finish_ru(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.change_finish_message)
    await callback.message.edit_text(
        f"<b>–¢–µ–∫—É—â–µ–µ RU —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n<i>{admin_panel.get_finish_message()}</i>\n\n‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ RU‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=get_cancel_keyboard("admin_settings"),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_set_finish_en")
async def ask_finish_en(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Admin.viewing_stats)
    await callback.message.edit_text(
        f"<b>Current EN message:</b>\n\n<i>{admin_panel.get_finish_message_en()}</i>\n\n‚úçÔ∏è Enter new EN message:",
        reply_markup=get_cancel_keyboard("admin_settings"),
        parse_mode="HTML"
    )

@router.message(Admin.viewing_stats, F.text)
async def process_new_finish_en(message: Message, state: FSMContext):
    admin_panel.set_finish_message_en(message.text.strip())
    await message.answer("‚úÖ <b>EN finish updated!</b>", parse_mode="HTML")
    await _show_settings_panel(message, state)

# Referral Settings
@router.callback_query(F.data == "admin_set_referral")
async def show_referral_settings(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏."""
    await _show_referral_panel(callback, state)

@router.callback_query(F.data == "admin_change_min_deposit")
async def change_min_deposit_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç—É."""
    await state.set_state(Admin.change_min_deposit)
    current_deposit = admin_panel.get_referral_settings().get('min_deposit', 0)
    await callback.message.edit_text(
        f"üí∞ <b>–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ–Ω. –¥–µ–ø–æ–∑–∏—Ç:</b> {current_deposit}\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard("admin_set_referral"),
        parse_mode="HTML"
    )
    try:
        await callback.answer()
    except TelegramBadRequest:
        pass

@router.message(StateFilter(Admin.change_min_deposit), F.text)
async def process_new_min_deposit(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–∏–π –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç."""
    try:
        deposit = float(message.text.strip().replace(",", "."))
        if deposit <= 0:
            raise ValueError("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.")
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        if admin_panel.update_referral_settings(min_deposit=deposit):
            await message.answer(f"‚úÖ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ: <b>${deposit:.2f}</b>", parse_mode="HTML")
            await _show_referral_panel(message, state)
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.", parse_mode="HTML")
            
    except ValueError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–µ–ø–æ–∑–∏—Ç—É: {e}")
        await message.answer(
            "‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 20 –∞–±–æ 25.5).",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–µ–ø–æ–∑–∏—Ç—É: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", parse_mode="HTML")

@router.callback_query(F.data == "admin_change_ref_link")
async def change_ref_link_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."""
    await state.set_state(Admin.change_referral_link)
    current_link = admin_panel.get_referral_settings().get('referral_link', '–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    await callback.message.edit_text(
        f"üîó <b>–ü–æ—Ç–æ—á–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</b>\n<code>{current_link}</code>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:",
        reply_markup=get_cancel_keyboard("admin_set_referral"),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(StateFilter(Admin.change_referral_link), F.text)
async def process_new_ref_link(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."""
    admin_panel.set_referral_link(message.text.strip())
    await message.answer("‚úÖ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.</b>", parse_mode="HTML")
    await state.clear()
    await _show_referral_panel(message, state)

# endregion

# region Auth Management
@router.callback_query(F.data == "admin_auth")
async def admin_auth_callback(callback: CallbackQuery):
    """–ö–æ–ª–±–µ–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", show_alert=True)
        return

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥—É
    await callback.message.edit_text("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...")
    await trading_api.auth.manual_login_start()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–≤—Å—è
    if trading_api.auth.driver:
        await callback.message.edit_text(
            "‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ.\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –¥–æ —Å–≤–æ–≥–æ –∞–∫–∞—É–Ω—Ç—É Pocket Option —É –≤—ñ–∫–Ω—ñ, —â–æ –≤—ñ–¥–∫—Ä–∏–ª–æ—Å—è.\n\n"
            "–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –Ø —É–≤—ñ–π—à–æ–≤ –¥–æ –∞–∫–∞—É–Ω—Ç—É", callback_data="admin_confirm_auth")]
            ])
        )
    else:
        await callback.message.edit_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä Selenium. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.")
    await callback.answer()
    
@router.callback_query(F.data == "admin_confirm_auth")
async def process_manual_login_confirmation(callback: CallbackQuery, state: FSMContext):
    """Handles the 'I have logged in' confirmation button."""
    await callback.message.edit_text("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —Ç–∞ –æ–Ω–æ–≤–ª—é—é —Å–µ—Å—ñ—é...")

    # This single call now handles confirmation, saving cookies, and re-initializing the API
    success = await trading_api.perform_manual_login_confirm()

    if success:
        balance = await trading_api.get_balance()
        balance_text = f"${balance:.2f}" if balance is not None else "–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏"
        await callback.message.answer(
            "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –°–µ—Å—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ.\n"
            f"API –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏. –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance_text}</b>",
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–∏ —É–≤—ñ–π—à–ª–∏ –¥–æ –∞–∫–∞—É–Ω—Ç—É —É –≤—ñ–∫–Ω—ñ –±—Ä–∞—É–∑–µ—Ä–∞, —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
        )
    
    await show_admin_panel(callback, state)


@router.callback_query(F.data == "start_manual_auth")
async def start_manual_auth_handler(callback: CallbackQuery):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–∫–ª–∏–∫ 'start_manual_auth' –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.
    –ó–∞–ø–∏—Ç—É—î —É –∞–¥–º—ñ–Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –ø—Ä–æ—Ü–µ—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.
    """
    await admin_auth_callback(callback)

@router.callback_query(F.data == "admin_telethon_login")
async def admin_telethon_login(callback: CallbackQuery, state: FSMContext):
    if not admin_panel.is_admin(callback.from_user.id):
        await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.", show_alert=True)
        return
    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—Ö–æ–¥—É –≤ Telegram —É —Ñ–æ—Ä–º–∞—Ç—ñ +380...",
        reply_markup=get_cancel_keyboard("admin_panel"),
        parse_mode="HTML"
    )
    await state.set_state(AuthStates.waiting_for_code)  # —Ç–∏–º—á–∞—Å–æ–≤–æ, –¥–∞–ª—ñ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º–æ –Ω–∞ waiting_for_password/–∫–æ–¥
    await callback.answer()

@router.message(StateFilter(AuthStates.waiting_for_code), F.text)
async def telethon_receive_phone(message: Message, state: FSMContext):
    phone = message.text.strip()
    try:
        await telethon_client.start_login(phone)
        await message.answer("–ö–æ–¥ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram. –í–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —Ç—É—Ç:")
        await state.set_state(AuthStates.waiting_for_password)  # –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—î–º–æ —è–∫ 'waiting_for_code'
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∫–æ–¥—É: {e}")
        await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∫–æ–¥. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        await state.clear()

@router.message(StateFilter(AuthStates.waiting_for_password), F.text)
async def telethon_receive_code(message: Message, state: FSMContext):
    code = message.text.strip()
    try:
        try:
            ok = await telethon_client.complete_login_code(code)
            if ok:
                await message.answer("‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! Telethon –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.")
                await state.clear()
                return
        except Exception as auth_exc:
            from telethon.errors import SessionPasswordNeededError
            if isinstance(auth_exc, SessionPasswordNeededError):
                await message.answer("üîê –£–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∏–π –∑–∞—Ö–∏—Å—Ç. –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø–∞—Ä–æ–ª—å 2FA:")
                await state.set_state(AuthStates.waiting_for_confirmation)
                return
            raise
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ–¥—É: {e}")
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ—é /admin.")
        await state.clear()

@router.message(StateFilter(AuthStates.waiting_for_confirmation), F.text)
async def telethon_receive_2fa(message: Message, state: FSMContext):
    password = message.text.strip()
    try:
        ok = await telethon_client.complete_2fa(password)
        if ok:
            await message.answer("‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π! Telethon –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.")
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ 2FA: {e}")
        await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å 2FA –∞–±–æ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞.")
    finally:
        await state.clear()

# endregion

# region Other
@router.callback_query(F.data == "admin_referrals")
async def show_admin_referrals(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤."""
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


@router.callback_query(F.data == "admin_check_cookies")
async def check_cookies_status(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å cookie —ñ –Ω–∞–¥—Å–∏–ª–∞—î –∑–≤—ñ—Ç."""
    are_valid = trading_api.auth.are_cookies_valid()
    
    if are_valid:
        expiry_time = trading_api.auth.get_expiration_time()
        if expiry_time:
            now = datetime.now(timezone.utc)
            time_left = expiry_time - now
            days = time_left.days
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            
            expiry_date_str = expiry_time.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

            message_text = (
                f"‚úÖ –°—Ç–∞—Ç—É—Å cookies\n\n"
                f"Cookies –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω., {hours} —á., {minutes} –º–∏–Ω.\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {expiry_date_str}"
            )
        else:
            message_text = "‚úÖ Cookies –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
    else:
        message_text = "‚ùå Cookies –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä—É—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."

    await callback.answer(message_text, show_alert=True)

@router.callback_query(F.data == "admin_workspace")
async def show_admin_workspace(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—É—î —Ä–æ–±–æ—á—É –æ–±–ª–∞—Å—Ç—å (–ø—Ä–∏–∫–ª–∞–¥)."""
    # –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ—Ç—Ä–µ–±—É—î —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)


@router.callback_query(F.data == "admin_panel")
async def back_to_admin_panel(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω–∫–∏."""
    await state.clear()
    await show_admin_panel(callback, state)

@router.callback_query(F.data == "admin_settings")
async def back_to_settings(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
    await _show_settings_panel(callback, state)

@router.callback_query(F.data == "admin_upload_ssid_json")
async def admin_upload_ssid_json(callback: CallbackQuery):
    """–ü–æ–¥—Å–∫–∞–∑–∫–∞ –∞–¥–º–∏–Ω—É –∑–∞–≥—Ä—É–∑–∏—Ç—å JSON —Å SSID."""
    await callback.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ JSON-—Ñ–∞–π–ª, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º (pocket_ssid.json).\n"
        "–§–æ—Ä–º–∞—Ç: {\"ssid\": \"...\", \"cookies\": [...](–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), \"expiry\": \"ISO\"(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ).",
        reply_markup=get_back_to_panel_keyboard("ru"),
        parse_mode="HTML",
    )
    await callback.answer()