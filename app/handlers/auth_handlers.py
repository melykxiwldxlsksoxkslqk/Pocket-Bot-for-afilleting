from aiogram import Router, F, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
import logging
import asyncio
from aiogram.types import Message

from app.core.dispatcher import trading_api
from app.core.fsm import Authorization
from app.core.keyboards import get_auth_confirmation_keyboard
from app.core.i18n import t
import app.core.database as db

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "start_user_auth")
async def handle_start_user_auth(callback: CallbackQuery, state: FSMContext):
    """
    Handles the 'start_user_auth' button for regular users.
    """
    lang = db.get_user_lang(callback.from_user.id)
    await callback.message.edit_text(
        t("auth.start_browser", lang) if t("auth.start_browser", lang) != "auth.start_browser" else "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ—ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó...\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ, —Ü–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥.",
        reply_markup=None
    )
    
    # This runs the browser opening in the background
    asyncio.create_task(trading_api.perform_manual_login_start())
    
    await asyncio.sleep(5) # Give some time for the browser to initialize
    
    await callback.message.edit_text(
        t("auth.follow_login_steps", lang) if t("auth.follow_login_steps", lang) != "auth.follow_login_steps" else "ü§ñ –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ–Ω–∞–π—Ç–µ –≤—Ö—ñ–¥ –≤ –∞–∫–∞—É–Ω—Ç —É –≤—ñ–∫–Ω—ñ –±—Ä–∞—É–∑–µ—Ä–∞, —è–∫–µ –≤—ñ–¥–∫—Ä–∏–ª–æ—Å—è.\n\n–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É —Ç–∞ –ø–æ–≤–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–æ—ó –∫—ñ–º–Ω–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.",
        reply_markup=get_auth_confirmation_keyboard(lang) # This keyboard should contain 'confirm_auth'
    )
    await state.set_state(Authorization.waiting_for_confirmation)

@router.callback_query(F.data == "confirm_auth", StateFilter(Authorization.waiting_for_confirmation))
async def handle_confirm_auth(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    Handles the confirmation from the user that they have logged in.
    """
    lang = db.get_user_lang(callback.from_user.id)
    await callback.message.edit_text(t("auth.checking", lang) if t("auth.checking", lang) != "auth.checking" else "‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—é —Å–µ—Å—ñ—é...", reply_markup=None)
    
    # This runs the confirmation logic
    success = await trading_api.perform_manual_login_confirm()
    
    if success:
        trading_api.critical_notification_sent = False # Reset anti-spam flag
        balance = await trading_api.get_balance()
        balance_text = f"${balance:.2f}" if balance is not None else t("auth.balance_na", lang) if t("auth.balance_na", lang) != "auth.balance_na" else "–Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏"
        await callback.message.edit_text(
            t("auth.success", lang, balance=balance_text) if t("auth.success", lang) != "auth.success" else f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ! –°–µ—Å—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ.\n\n–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance_text}</b>",
            parse_mode="HTML"
        )
        await state.clear()
    else:
        await callback.message.edit_text(t("auth.failed", lang) if t("auth.failed", lang) != "auth.failed" else "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:\n\n1. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –≤–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–∫–∞—É–Ω—Ç.\n2. –û–Ω–æ–≤—ñ—Ç—å —Å—Ç–æ—Ä—ñ–Ω–∫—É (F5) —É –±—Ä–∞—É–∑–µ—Ä—ñ.\n3. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —â–µ —Ä–∞–∑.", reply_markup=get_auth_confirmation_keyboard(lang))
    await callback.answer()

# ===== –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –µ–¥–∏–Ω—ã–º JSON: {"ssid": "...", "cookies": [...], "expiry": "ISO"} =====
@router.callback_query(F.data == "upload_ssid_json")
async def prompt_upload_ssid_json(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ JSON-—Ñ–∞–π–ª: {\"ssid\": \"...\", \"cookies\": [...](–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), \"expiry\": \"ISO\"(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."
    )
    await callback.answer()

@router.message(F.document)
async def handle_ssid_json_upload(message: Message):
    try:
        file = await message.bot.get_file(message.document.file_id)
        file_bytes = await message.bot.download_file(file.file_path)
        import json
        from datetime import datetime, timezone
        from pathlib import Path
        from app.services.pocket_option_auth import PocketOptionAuth

        data = json.loads(file_bytes.read().decode("utf-8"))
        ssid = data.get("ssid")
        if not ssid or not isinstance(ssid, str):
            await message.answer("‚ùå –ù–µ—Ç –∫–ª—é—á–∞ 'ssid' –≤ JSON.")
            return

        cookies = data.get("cookies")
        expiry_iso = data.get("expiry")
        if isinstance(cookies, list):
            auth = PocketOptionAuth()
            auth._save_session(cookies)
            if expiry_iso:
                try:
                    _ = datetime.fromisoformat(expiry_iso.replace("Z", "+00:00"))
                except Exception:
                    expiry_iso = datetime.now(timezone.utc).isoformat()
                Path(auth.expiry_file).write_text(json.dumps({"expiry": expiry_iso}), encoding="utf-8")

        ok = await trading_api.initialize_session()
        if ok:
            await message.answer("‚úÖ SSID –ø—Ä–∏–º–µ–Ω—ë–Ω. API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        else:
            await message.answer("‚ö†Ô∏è SSID –ø—Ä–∏–Ω—è—Ç. –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ—è–≤–∏–ª—Å—è ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–∫–∂–µ cookies –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ.")
    except Exception as e:
        logger.exception("Failed to handle SSID JSON")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")