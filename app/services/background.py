import asyncio
import logging
from datetime import datetime, timedelta
from app.core.dispatcher import bot, admin_panel, trading_api
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

logger = logging.getLogger(__name__)

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
SESSION_CHECK_INTERVAL_OK = 1800  # 30 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
SESSION_CHECK_INTERVAL_ERROR = 3600  # 1 —á–∞—Å, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–º–µ—Ä–ª–∞ (—á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å)
PROACTIVE_REFRESH_THRESHOLD_HOURS = 12  # –ó–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å

async def periodic_auth_check(bot, trading_api, admin_panel, interval_seconds: int = 3600):
    """
    Periodically checks the API connection status and warns the admin if the session
    is invalid, expired, or expiring soon. Runs once per hour.
    """
    await asyncio.sleep(20) # Initial delay to allow the bot to start up
    logger.info("üöÄ –ó–∞–ø—É—â–µ–Ω–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Å—Å–∏–∏.")

    while True:
        try:
            admin_id = admin_panel.get_admin_id()
            if not admin_id:
                await asyncio.sleep(interval_seconds)
                continue

            # Check 1: Is connection dead or session expired? (Critical)
            if not await trading_api.is_api_connection_alive():
                # Anti-spam check: only send if a notification hasn't been sent already.
                if not trading_api.critical_notification_sent:
                    logger.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ —Å–µ—Å—Å–∏—è API –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
                    auth_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîë –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="start_manual_auth")]
                    ])
                    await bot.send_message(
                        admin_id,
                        "üî¥ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!</b>\n\n–°–µ—Å—Å–∏—è API –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.",
                        reply_markup=auth_keyboard,
                        parse_mode="HTML"
                    )
                    trading_api.critical_notification_sent = True # Set flag after sending
            else:
                # If the connection is alive, reset the flag so it can notify again if it fails later.
                if trading_api.critical_notification_sent:
                    logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –°–±—Ä–∞—Å—ã–≤–∞—é —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
                    trading_api.critical_notification_sent = False
                
                # Check 2: Is session expiring soon? (Warning)
                expiry_warning = trading_api.auth.get_expiry_warning(days_threshold=3)
                if expiry_warning:
                    logger.info(f"–°–µ—Å—Å–∏—è —Å–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è: {expiry_warning}")
                    auth_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üîë –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="start_manual_auth")]
                    ])
                    await bot.send_message(
                        admin_id,
                        f"üü° <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è</b>\n\n{expiry_warning} –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ–µ–≤ –≤ —Ä–∞–±–æ—Ç–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ—ë.",
                        reply_markup=auth_keyboard,
                        parse_mode="HTML"
                    )
                else:
                    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏: –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–µ.")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Å—ñ—ó: {e}", exc_info=True)
            
        await asyncio.sleep(interval_seconds)

async def start_background_tasks():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è."""
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–≤–¥–∞–Ω—å...")
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–∞—à—É –∑–∞–¥–∞—á—É
    asyncio.create_task(periodic_auth_check(bot, trading_api, admin_panel)) 