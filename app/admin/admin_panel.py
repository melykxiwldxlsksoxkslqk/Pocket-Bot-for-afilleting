import json
import os
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.core.i18n import t

logger = logging.getLogger(__name__)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_DIR = os.path.join(BASE_DIR, "data")

class AdminPanel:
    def __init__(self, admin_ids: List[int], data_file: str = os.path.join(DATA_DIR, "admin_data.json")):
        self.admin_ids = admin_ids
        self.data_file = data_file
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—ñ/–¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ .env
        self.referral_link = os.getenv("REFERRAL_LINK", "")
        self.min_deposit = float(os.getenv("MIN_DEPOSIT", 20.0))
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–µ—à—Ç—É –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É –∞–±–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        self.data = self._load_data()

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ .env –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏ –∑ —Ñ–∞–π–ª—É, —è–∫—â–æ –≤–æ–Ω–∏ —Ç–∞–º —î
        # –¶–µ —Ä–æ–±–∏—Ç—å json –≥–æ–ª–æ–≤–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ–º –ø—Ä–∞–≤–¥–∏
        self.referral_link = self.data.get('referral_settings', {}).get('referral_link', self.referral_link)
        self.min_deposit = self.data.get('referral_settings', {}).get('min_deposit', self.min_deposit)
        
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤ self.data –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        self.data.setdefault('referral_settings', {})['referral_link'] = self.referral_link
        self.data.setdefault('referral_settings', {})['min_deposit'] = self.min_deposit

        self._migrate_data()
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if "statistics" not in self.data:
            self.data["statistics"] = {
                "total_starts": 0,
                "signals_generated": 0
            }
            self._save_data()
    
    def _migrate_data(self):
        """
        –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –¥–æ –Ω–æ–≤–æ—ó.
        - –í–∏–¥–∞–ª—è—î –ø–æ–ª—è 'registered' —Ç–∞ 'deposited' –∑ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        - –í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ –∫–ª—é—á—ñ 'stats' —Ç–∞ 'daily_stats'.
        """
        updated = False
        
        # –ú—ñ–≥—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        users = self.data.get("users", {})
        for user_id, user_data in users.items():
            if isinstance(user_data, dict):
                if "registered" in user_data:
                    del user_data["registered"]
                    updated = True
                if "deposited" in user_data:
                    del user_data["deposited"]
                    updated = True
        
        # –ú—ñ–≥—Ä–∞—Ü—ñ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if "stats" in self.data:
            del self.data["stats"]
            updated = True
        if "daily_stats" in self.data:
            del self.data["daily_stats"]
            updated = True
            
        if updated:
            logger.info("–í–∏–∫–æ–Ω–∞–Ω–æ –º—ñ–≥—Ä–∞—Ü—ñ—é –¥–∞–Ω–∏—Ö: –≤–∏–¥–∞–ª–µ–Ω–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –ø–æ–ª—è —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            self._save_data()
    
    def _load_data(self) -> Dict:
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except json.JSONDecodeError:
                return self._get_default_data()
        return self._get_default_data()
    
    def _save_data(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
        try:
            os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
            with open(self.data_file, 'w', encoding='utf-8') as f:
                json.dump(self.data, f, indent=4, ensure_ascii=False)
        except (IOError, json.JSONDecodeError) as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª {self.data_file}: {e}")
    
    def _get_default_data(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."""
        return {
            "broadcasts": [],
            "maintenance_mode": False,
            "maintenance_message": "–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–º—É –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            "referral_settings": {
                "min_deposit": 20.0,
                "commission_percent": 30.0,
                "referral_link": "https://pocket-friends.com/r/your_default_link"
            },
            "signal_settings": {
                "min_confidence": 0.7,
                "max_daily_signals": 10
            },
            "file_cache": {},
            "users": {},
            "welcome_message": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø ‚Äî BotX BOT, –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞.\n\n–ú–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, —á—Ç–æ–±—ã –≤—ã —É–≤–µ—Ä–µ–Ω–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö.\n\n–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∏–∂–µ: ‚Äò—Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã‚Äô –∏–ª–∏ ‚Äò–æ–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã‚Äô.üëá",
            "welcome_message_en": "üëã Welcome! I'm BotX BOT ‚Äî your reliable assistant in the trading world.\n\nI provide quality trading signals and educational materials so you can navigate the markets with confidence.\n\nUse the buttons below to proceed: ‚ÄòTrading signals‚Äô or ‚ÄòEducational materials‚Äô.üëá",
            "finish_message_en": "Congrats! You have successfully passed verification and got full access to the bot.\n\nNow you can use trading signals and educational materials.",
            "statistics": {
                "total_starts": 0,
                "signals_generated": 0, # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                "daily_signals": {} # –ö–ª—é—á: "YYYY-MM-DD", –ó–Ω–∞—á–µ–Ω–Ω—è: –∫—ñ–ª—å–∫—ñ—Å—Ç—å
            }
        }
    
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
        return user_id in self.admin_ids
    
    def get_admin_id(self) -> Optional[int]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î ID –ø–µ—Ä—à–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑—ñ —Å–ø–∏—Å–∫—É."""
        return self.admin_ids[0] if self.admin_ids else None
    
    def get_admin_keyboard(self, lang: str = "ru") -> InlineKeyboardMarkup:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ."""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=t("admin.stats", lang), callback_data="admin_stats"),
            InlineKeyboardButton(text=t("admin.broadcast", lang), callback_data="admin_broadcast_menu")
        )
        builder.row(
            InlineKeyboardButton(text=t("admin.settings", lang), callback_data="admin_settings"),
            InlineKeyboardButton(text=t("admin.cookies_status", lang), callback_data="admin_check_cookies")
        )
        builder.row(
            InlineKeyboardButton(text="üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å JSON (SSID)", callback_data="admin_upload_ssid_json")
        )
        builder.row(
            InlineKeyboardButton(text=t("admin.maintenance", lang), callback_data="admin_maintenance")
        )
        builder.row(
             InlineKeyboardButton(text=t("admin.go_to_signals", lang), callback_data="admin_show_signals")
        )
        return builder.as_markup()
    
    def get_maintenance_keyboard(self, lang: str = "ru") -> InlineKeyboardMarkup:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –º–µ–Ω—é –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
        builder = InlineKeyboardBuilder()
        mode_status = t("maintenance.enabled", lang) if self.get_maintenance_mode() else t("maintenance.disabled", lang)
        toggle_text = t("maintenance.disable_mode", lang) if self.get_maintenance_mode() else t("maintenance.enable_mode", lang)

        builder.row(
            InlineKeyboardButton(text=f"{t('maintenance.status', lang)} {mode_status}", callback_data="none") # –ü—Ä–æ—Å—Ç–æ –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        )
        builder.row(
            InlineKeyboardButton(text=toggle_text, callback_data="admin_maintenance_toggle")
        )
        builder.row(
            InlineKeyboardButton(text=t("maintenance.change_message", lang), callback_data="admin_set_maintenance_msg")
        )
        return builder.as_markup()
    
    def get_broadcast_keyboard(self, lang: str = "ru") -> InlineKeyboardMarkup:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –º–µ–Ω—é —Ä–æ–∑—Å–∏–ª–∫–∏."""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=t("admin.broadcast.all_users", lang), callback_data="admin_broadcast_all")
        )
        builder.row(
            InlineKeyboardButton(text=t("admin.broadcast.verified_only", lang), callback_data="admin_broadcast_verified")
        )
        builder.row(
            InlineKeyboardButton(text=t("back.back", lang), callback_data="admin_panel")
        )
        return builder.as_markup()
    
    def get_settings_keyboard(self, lang: str = "ru") -> InlineKeyboardMarkup:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text=t("admin.settings.welcome", lang), callback_data="admin_set_welcome"),
            InlineKeyboardButton(text=t("admin.settings.referral", lang), callback_data="admin_set_referral")
        )
        builder.row(
            InlineKeyboardButton(text=t("admin.settings.finish_msg", lang), callback_data="admin_set_finish_msg")
        )
        builder.row(
            InlineKeyboardButton(text=t("admin.settings.back", lang), callback_data="admin_panel")
        )
        return builder.as_markup()
    
    def add_broadcast(self, message: str, target: str = "all"):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–æ–∑—Å–∏–ª–∫–∏."""
        broadcast = {
            "message": message,
            "target": target,
            "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "status": "pending"
        }
        self.data["broadcasts"].append(broadcast)
        self._save_data()
    
    def get_pending_broadcasts(self) -> List[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—á—ñ–∫—É—é—á–∏—Ö —Ä–æ–∑—Å–∏–ª–æ–∫."""
        return [b for b in self.data["broadcasts"] if b["status"] == "pending"]
    
    def update_broadcast_status(self, index: int, status: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–æ–∑—Å–∏–ª–∫–∏."""
        if 0 <= index < len(self.data["broadcasts"]):
            self.data["broadcasts"][index]["status"] = status
            self._save_data()
    
    def get_maintenance_mode(self) -> bool:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
        return self.data.get("maintenance_mode", False)
    
    def set_maintenance_mode(self, mode: bool) -> bool:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
        try:
            self.data["maintenance_mode"] = mode
            self._save_data()
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—É –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: {e}")
            return False
    
    def get_maintenance_message(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
        return self.data.get("maintenance_message", "–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–æ–º—É –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    
    def set_maintenance_message(self, message: str) -> bool:
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è."""
        try:
            self.data["maintenance_message"] = message
            self._save_data()
            return True
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: {e}")
            return False
    
    def set_welcome_message(self, message: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        self.data["welcome_message"] = message
        self._save_data()
    
    def set_welcome_message_en(self, message: str):
        """Updates English welcome message."""
        self.data["welcome_message_en"] = message
        self._save_data()
    
    def get_welcome_message(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è."""
        return self.data.get("welcome_message", self._get_default_data()["welcome_message"])
    
    def get_welcome_message_en(self) -> str:
        """Returns English welcome message."""
        return self.data.get("welcome_message_en", self._get_default_data()["welcome_message_en"])
    
    def update_referral_settings(self, min_deposit: float = None, referral_link: str = None, promo_code: str = None):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏."""
        if "referral_settings" not in self.data:
            self.data["referral_settings"] = self._get_default_data()["referral_settings"]
        
        if min_deposit is not None:
         self.data["referral_settings"]["min_deposit"] = min_deposit
        if referral_link is not None:
            self.data["referral_settings"]["referral_link"] = referral_link
        if promo_code is not None:
            self.data["referral_settings"]["promo_code"] = promo_code
        self._save_data()
        return True
    
    def set_referral_link(self, link: str):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–æ–≤–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è."""
        if "referral_settings" not in self.data:
            self.data["referral_settings"] = self._get_default_data()["referral_settings"]
        self.data["referral_settings"]["referral_link"] = link
        self._save_data()
    
    def get_referral_settings(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏."""
        data = self._load_data()  # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É
        # –î–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ, —è–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —â–µ –≤ —Å—Ç–∞—Ä–æ–º—É –º—ñ—Å—Ü—ñ
        if "referral_link" not in data.get("referral_settings", {}):
            old_link = data.get("settings", {}).get("referral_link")
            if old_link:
                if "referral_settings" not in data:
                    data["referral_settings"] = {}
                data["referral_settings"]["referral_link"] = old_link
                # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —è–∫—â–æ –≤–æ–Ω–∞ —î
                if "settings" in data:
                    data.pop("settings")
                self._save_data(data)

        return data.get("referral_settings", self._get_default_data()["referral_settings"])
    
    def get_file_id(self, file_name: str) -> Optional[str]:
        """–û—Ç—Ä–∏–º—É—î –∫–µ—à–æ–≤–∞–Ω–∏–π file_id –∑–∞ —ñ–º'—è–º —Ñ–∞–π–ª—É."""
        return self._load_data().get("file_ids", {}).get(file_name)

    def set_file_id(self, file_name: str, file_id: str):
        """–ó–±–µ—Ä—ñ–≥–∞—î file_id –¥–ª—è —Ñ–∞–π–ª—É."""
        data = self._load_data()
        if "file_ids" not in data:
            data["file_ids"] = {}
        data["file_ids"][file_name] = file_id
        self._save_data()

    def clear_file_id(self, file_name: str) -> bool:
        """–í–∏–¥–∞–ª—è—î –∫–µ—à–æ–≤–∞–Ω–∏–π file_id –¥–ª—è –∑–∞–∑–Ω–∞—á–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É (—â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É)."""
        data = self._load_data()
        file_ids = data.get("file_ids", {})
        if file_name in file_ids:
            try:
                del file_ids[file_name]
                self._save_data()
                return True
            except Exception:
                return False
        return False

    def get_user_stats(self, user_id: int) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        return {
            "signals_used": 0,
            "success_rate": 0.0,
            "total_trades": 0,
            "last_active": None
        }
    
    def get_global_stats(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return {
            "total_users": 0,
            "active_users": 0,
            "total_signals": 0,
            "success_rate": 0.0
        }
        
    def get_settings(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."""
        return {
            "welcome_message": self.get_welcome_message(),
            "referral_settings": self.get_referral_settings(),
            "maintenance_mode": self.get_maintenance_mode(),
            "maintenance_message": self.get_maintenance_message()
        }
    
    def get_stats(self) -> Dict:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        users = self.data.get("users", {})
        total_users = len(users)
        verified_users = sum(1 for user_data in users.values() if isinstance(user_data, dict) and user_data.get("is_verified"))
        
        return {
            "total_users": total_users,
            "verified_users": verified_users,
            "active_referrals": 0,  # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤
            "total_volume": 0.0     # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –æ–±–æ—Ä–æ—Ç
        }
    
    def update_user_activity(self, user_id: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user_id = str(user_id)
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π –∞–±–æ –¥–∞–Ω—ñ –≤ —Å—Ç–∞—Ä–æ–º—É —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ, —Å—Ç–≤–æ—Ä—é—î–º–æ/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –Ω–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫
        if user_id not in self.data["users"] or not isinstance(self.data["users"].get(user_id), dict):
            self.data["users"][user_id] = {
                "last_activity": datetime.now().isoformat(),
                "is_verified": False,
                "account_id": None
            }
        else:
            # –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å
            self.data["users"][user_id]["last_activity"] = datetime.now().isoformat()
        self._save_data()

    def is_user_verified(self, user_id: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á."""
        user = self.data["users"].get(str(user_id))
        return user and isinstance(user, dict) and user.get("is_verified", False)

    def verify_user(self, user_id: str, account_id: str):
        """–ü–æ–∑–Ω–∞—á–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–æ–≥–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ ID –∞–∫–∞—É–Ω—Ç—É."""
        user_id_str = str(user_id)
        user_data = self.data.get("users", {}).get(user_id_str)

        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π –∞–±–æ –¥–∞–Ω—ñ –≤ —Å—Ç–∞—Ä–æ–º—É —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        if not user_data or not isinstance(user_data, dict):
            self.data["users"][user_id_str] = {
                "last_activity": datetime.now().isoformat(),
                "is_verified": True,
                "account_id": account_id,
                "is_registered": False,
                "has_deposit": False
            }
        else:
            user_data["is_verified"] = True
            user_data["account_id"] = account_id
        self._save_data()

    # --- –ú–µ—Ç–æ–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ ---
    def add_or_update_user(self, user_id: int, username: Optional[str] = None, uid: Optional[str] = None):
        """–î–æ–¥–∞—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –æ–Ω–æ–≤–ª—é—î —ñ—Å–Ω—É—é—á–æ–≥–æ, –æ–±—Ä–æ–±–ª—è—é—á–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Ñ–æ—Ä–º–∞—Ç–∏ –¥–∞–Ω–∏—Ö.
        –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤–ø–µ—Ä—à–µ (–Ω–æ–≤–∏–π), —ñ False, —è–∫—â–æ –∑–∞–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.
        """
        user_id_str = str(user_id)
        users = self.data.setdefault("users", {})

        is_new_user = False

        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–æ–≤–∏–π –∞–±–æ –¥–∞–Ω—ñ –≤ —Å—Ç–∞—Ä–æ–º—É —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ, —Å—Ç–≤–æ—Ä—é—î–º–æ/–ø–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ –Ω–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫
        if user_id_str not in users or not isinstance(users.get(user_id_str), dict):
            users[user_id_str] = {
                "username": username,
                "is_registered": False,
                "has_deposit": False,
                "uid": uid,
                "first_seen": datetime.now().isoformat(),
                "last_seen": datetime.now().isoformat(),
            }
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –¥–ª—è {user_id_str}")
            is_new_user = True
        else:
            # –Ü–Ω–∞–∫—à–µ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å —Ç–∞ —ñ–Ω—à—ñ –ø–æ–ª—è
            users[user_id_str]["last_seen"] = datetime.now().isoformat()
            if username:
                users[user_id_str]["username"] = username
            if uid:
                users[user_id_str]["uid"] = uid
        
        self._save_data()
        return is_new_user

    def update_user_field(self, user_id: int, field: str, value: Any):
        """–û–Ω–æ–≤–ª—é—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –ø–æ–ª–µ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å—Ç–≤–æ—Ä—é—é—á–∏ –π–æ–≥–æ, —è–∫—â–æ –≤—ñ–Ω –Ω–µ —ñ—Å–Ω—É—î."""
        user_id_str = str(user_id)
        users = self.data.setdefault("users", {})
        
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∑–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ—Å–Ω—É—î —ñ —î —Å–ª–æ–≤–Ω–∏–∫–æ–º –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
        if user_id_str not in users or not isinstance(users.get(user_id_str), dict):
            # –¶–µ —Å—Ç–≤–æ—Ä–∏—Ç—å –Ω–æ–≤–∏–π —Å–ª–æ–≤–Ω–∏–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ —Å—Ç–∞—Ä–∏–π –Ω–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
            self.add_or_update_user(user_id)
        
        # –¢–µ–ø–µ—Ä, –∫–æ–ª–∏ –º–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–ª–µ.
        users[user_id_str][field] = value
        self._save_data()
    
    def get_user(self, user_id: int) -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return self.data.get("users", {}).get(str(user_id))

    def get_all_users(self) -> Dict[str, Any]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."""
        return self.data.get("users", {})

    def get_user_id_by_uid(self, uid: str) -> Optional[int]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å user_id –∑–∞ –π–æ–≥–æ PocketOption UID."""
        users = self.data.get("users", {})
        for user_id, user_data in users.items():
            if isinstance(user_data, dict) and user_data.get("uid") == uid:
                return int(user_id)
        return None

    def is_fully_verified(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º (–∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —ñ –º–∞—î –¥–µ–ø–æ–∑–∏—Ç)."""
        user = self.get_user(user_id)
        if user and isinstance(user, dict):
            return user.get("is_registered", False) and user.get("has_deposit", False)
        return False
        
    def get_user_uid(self, user_id: int) -> Optional[str]:
        """–û—Ç—Ä–∏–º—É—î PocketOption UID –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        user = self.get_user(user_id)
        return user.get("uid") if user and isinstance(user, dict) else None

    # --- –ú–µ—Ç–æ–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    def increment_start_count(self):
        """–ó–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏ /start."""
        self.data.setdefault("statistics", {})["total_starts"] = self.data.get("statistics", {}).get("total_starts", 0) + 1
        self._save_data()

    def increment_signals_generated(self):
        """–ó–±—ñ–ª—å—à—É—î –∑–∞–≥–∞–ª—å–Ω—É —Ç–∞ —â–æ–¥–µ–Ω–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö —Å–∏–≥–Ω–∞–ª—ñ–≤."""
        stats = self.data.setdefault("statistics", self._get_default_data()["statistics"])
        today_str = datetime.now().strftime("%Y-%m-%d")
        
        # –ó–±—ñ–ª—å—à—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        stats["signals_generated"] = stats.get("signals_generated", 0) + 1
        
        # –ó–±—ñ–ª—å—à—É—î–º–æ —â–æ–¥–µ–Ω–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        daily_stats = stats.setdefault("daily_signals", {})
        daily_stats[today_str] = daily_stats.get(today_str, 0) + 1
        
        self._save_data()

    def get_statistics(self) -> Dict:
        """
        –û–±—á–∏—Å–ª—é—î —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –ø–æ—Ç–æ—á–Ω–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –±–æ—Ç–∞.
        """
        stats = self.data.get("statistics", {})
        users = self.data.get("users", {})
        today_str = datetime.now().strftime("%Y-%m-%d")
        
        verified_users = 0
        in_verification = 0
        
        for user in users.values():
            if isinstance(user, dict):
                if user.get("is_registered") and user.get("has_deposit"):
                    verified_users += 1
                elif user.get("is_registered"):
                    in_verification += 1

        return {
            "total_starts": stats.get("total_starts", 0),
            "signals_generated_total": stats.get("signals_generated", 0),
            "signals_generated_today": stats.get("daily_signals", {}).get(today_str, 0),
            "total_users": len(users),
            "verified_users": verified_users,
            "in_verification_users": in_verification
        }

    # --- –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ ---
    def get_user_language(self, user_id: int) -> str:
        """–û—Ç—Ä–∏–º—É—î –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 'ua'."""
        user = self.data["users"].get(str(user_id))
        return user.get("language", "ua") if user else "ua"

    def set_finish_message(self, message: str):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é."""
        self.data["finish_message"] = message
        self._save_data()
    
    def get_finish_message(self) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—é."""
        return self.data.get("finish_message", "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∏ –æ–±—É—á–∞—é—â–∏–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.")
    
    def set_finish_message_en(self, message: str):
        self.data["finish_message_en"] = message
        self._save_data()
    
    def get_finish_message_en(self) -> str:
        return self.data.get("finish_message_en", self._get_default_data()["finish_message_en"]) 